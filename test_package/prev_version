import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Timer;

public class GameProject extends JPanel implements ActionListener, KeyListener {

    private Timer timer;
    private int charX = -75, charY = 220; // Initial position of the character
    private int opponentX = 1100, opponentY = 220; // Position of the opponent
    private Image backgroundImage;
    private Image characterImage;
    private Image opponentImage; // Opponent image
    private int charWidth = 575, charHeight = 350; // Size of the character
    private Clip backgroundClip;

    private List<String> skills; // List of character skills
    private boolean showSkills = false; // Flag to show/hide skills
    private boolean opponentDefeated = false; // Flag to track if the opponent is defeated
    private String defeatMessage = ""; // Message to display when opponent is defeated

    public GameProject() {
        // Timer to control the game loop, triggers every 15ms
        timer = new Timer(15, this);
        timer.start();

        // Load images
        backgroundImage = new ImageIcon("test_package\\\\image\\\\1347431.jpeg").getImage(); // Replace with your background image path
        characterImage = new ImageIcon("test_package\\image\\furina-character-avatar-profile-genshin-1.jpg").getImage(); // Replace with your character image path
        opponentImage = new ImageIcon("test_package\\image\\Enemy_Fatui_Pyro_Agent.jpg").getImage(); // Replace with your opponent image path

        // Add KeyListener to capture user input
        setFocusable(true);
        addKeyListener(this);

        // Initialize skills
        skills = new ArrayList<>();
        skills.add("Skill 1: Fireball");
        skills.add("Skill 2: Ice Blast");
        skills.add("Skill 3: Thunder Strike");

        // Play background music
        playBackgroundMusic("test_package\\image\\Fontaine.wav"); // Replace with your audio file path
        FloatControl volumeControl = (FloatControl) backgroundClip.getControl(FloatControl.Type.MASTER_GAIN);
        volumeControl.setValue(-30.0f); // Decrease volume (range: -80.0f to 6.0f)
    }

    // Method to play background music
    private void playBackgroundMusic(String filePath) {
        try {
            File audioFile = new File(filePath);
            AudioInputStream audioStream = AudioSystem.getAudioInputStream(audioFile);
            backgroundClip = AudioSystem.getClip();
            backgroundClip.open(audioStream);
            backgroundClip.loop(Clip.LOOP_CONTINUOUSLY); // Loop the music continuously
            backgroundClip.start();
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            System.err.println("Error playing audio file: " + e.getMessage());
        }
    }

    // Override paintComponent to draw custom graphics
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Draw the background image
        g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);

        // Draw the character image at updated position and size
        g.drawImage(characterImage, charX, charY, charWidth, charHeight, this);
        
        // Draw the opponent image at its position if not defeated
        if (!opponentDefeated) {
            g.drawImage(opponentImage, opponentX, opponentY, charWidth, charHeight, this); // Same Y position as character
        }

        // Draw skills if the flag is set
        if (showSkills) {
            drawSkills(g);
        }

        // Draw defeat message if opponent is defeated
        if (!defeatMessage.isEmpty()) {
            g.setColor(Color.WHITE);
            g.fillRect(50, 50, 400, 100); // Background for message
            g.setColor(Color.BLACK);
            g.drawRect(50, 50, 400, 100); // Border for message
            g.drawString(defeatMessage, 60, 80);
        }
    }

    // Method to draw skills on the screen
    private void drawSkills(Graphics g) {
        g.setColor(Color.WHITE);
        g.fillRect(50, 50, 300, 200); // Background for skills list
        g.setColor(Color.BLACK);
        g.drawRect(50, 50, 300, 200); // Border for skills list

        // Draw each skill
        for (int i = 0; i < skills.size(); i++) {
            g.drawString(skills.get(i), 60, 80 + i * 30);
        }
    }

    // This method is called automatically every time the timer triggers
    @Override
    public void actionPerformed(ActionEvent e) {
        // Check if character has moved to the right edge
        if (charX + charWidth > getWidth()) {
            // Switch to the start menu
            JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
            StartMenu.showMenu(topFrame); // Go back to the start menu
            return; // Exit the actionPerformed method
        }

        // Repaint the screen
        repaint();
    }

    // Handle key press events
    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();

        // Show skills if 'H' is pressed
        if (key == KeyEvent.VK_H) {
            showSkills = !showSkills; // Toggle skills display
        }

        // Use Ice Blast skill if '2' is pressed
        if (key == KeyEvent.VK_2 && !opponentDefeated) {
            opponentDefeated = true; // Set the opponent as defeated
            defeatMessage = "You have successfully defeated the enemy!";
            Timer messageTimer = new Timer(2000, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    defeatMessage = ""; // Clear the message after 2 seconds
                    ((Timer)e.getSource()).stop(); // Stop the timer
                }
            });
            messageTimer.setRepeats(false); // Ensure the timer only runs once
            messageTimer.start(); // Start the timer
        }

        // Modify position
        if (key == KeyEvent.VK_LEFT) {
            charX -= 10; // Move left
        }
        if (key == KeyEvent.VK_RIGHT) {
            charX += 10; // Move right
        }
        if (key == KeyEvent.VK_UP) {
            charY -= 10; // Move up
        }
        if (key == KeyEvent.VK_DOWN) {
            charY += 10; // Move down
        }

        // Modify size using + and - keys
        if (key == KeyEvent.VK_PLUS || key == KeyEvent.VK_EQUALS) { // Increase size with '+' key
            charWidth += 10;
            charHeight += 10;
        }
        if (key == KeyEvent.VK_MINUS) { // Decrease size with '-' key
            charWidth = Math.max(10, charWidth - 10); // Prevent size from becoming negative
            charHeight = Math.max(10, charHeight - 10);
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {}
    @Override
    public void keyTyped(KeyEvent e) {}

    // Create the game window
    public static void main(String[] args) {
        JFrame frame = new JFrame("Simple Game Project");
        GameProject game = new GameProject();

        frame.add(game);
        frame.setSize(1700, 800); // Set the size of the window
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Close the program when the window is closed
        frame.setVisible(true); // Make the window visible
    }
}
